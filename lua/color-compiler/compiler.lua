local M = {}

local fmt = string.format
local hl_groups = vim.api.nvim_get_hl(0, {}) -- define all global highlight groups
-- WARN: Forgive me :(
local group_names = {
	-- EDITOR --
	"ColorColumn",
	"Conceal",
	"Cursor",
	"lCursor",
	"CursorIM",
	"CursorColumn",
	"CursorLine",
	"Directory",
	"EndOfBuffer",
	"ErrorMsg",
	"VertSplit",
	"Folded",
	"FoldColumn",
	"SignColumn",
	"SignColumnSB",
	"Substitute",
	"LineNr",
	"CursorLineNr",
	"MatchParen",
	"ModeMsg",
	"MsgSeparator",
	"MoreMsg",
	"NonText",
	"Normal",
	"NormalNC",
	"NormalSB",
	"NormalFloat",
	"FloatBorder",
	"FloatTitle",
	"Pmenu",
	"PmenuSel",
	"PmenuSbar",
	"PmenuThumb",
	"Question",
	"QuickFixLine",
	"Search",
	"IncSearch",
	"CurSearch",
	"SpecialKey",
	"SpellBad",
	"SpellCap",
	"SpellLocal",
	"SpellRare",
	"StatusLine",
	"StatusLineNC",
	"TabLine",
	"TabLineFill",
	"TabLineSel",
	"TermCursor",
	"TermCursorNC",
	"Title",
	"Visual",
	"VisualNOS",
	"WarningMsg",
	"Whitespace",
	"WildMenu",
	"WinBar",
	"WinBarNC",
	"WinSeparator",
	-- SYNTAX --
	"Comment",
	"SpecialComment",
	"Constant",
	"String",
	"Character",
	"Number",
	"Float",
	"Boolean",
	"Identifier",
	"Function",
	"Statement",
	"Conditional",
	"Repeat",
	"Label",
	"Operator",
	"Keyword",
	"Exception",
	"PreProc",
	"Include",
	"Define",
	"Macro",
	"PreCondit",
	"StorageClass",
	"Structure",
	"Special",
	"Type",
	"Typedef",
	"SpecialChar",
	"Tag",
	"Delimiter",
	"Debug",
	"Underlined",
	"Bold",
	"Italic",
	"Error",
	"Todo",
	"qfLineNr",
	"qfFileName",
	"htmlH1",
	"htmlH2",
	"mkdCodeDelimiter",
	"mkdCodeStart",
	"mkdCodeEnd",
	"debugPC",
	"debugBreakpoint",
	"illuminatedWord",
	"illuminatedCurWord",
	"diffAdded",
	"diffRemoved",
	"diffChanged",
	"diffOldFile",
	"diffNewFile",
	"diffFile",
	"diffLine",
	"diffIndexLine",
	"DiffAdd",
	"DiffChange",
	"DiffDelete",
	"DiffText",
	"healthError",
	"healthSuccess",
	"healthWarning",
	"GlyphPalette1",
	"GlyphPalette2",
	"GlyphPalette3",
	"GlyphPalette4",
	"GlyphPalette6",
	"GlyphPalette7",
	"GlyphPalette9",
	"rainbow1",
	"rainbow2",
	"rainbow3",
	"rainbow4",
	"rainbow5",
	"rainbow6",
	"csvCol0",
	"csvCol1",
	"csvCol2",
	"csvCol3",
	"csvCol4",
	"csvCol5",
	"csvCol6",
	"csvCol7",
	"csvCol8",
	-- PLUGINS --
	-- NORMALNVIM --
	"MarkDownTask",
	"MarkDownTodo",
	"MarkdownNote",
	"MarkdownCheck",
	"MarkdownSee",
	"MarkdownURL",
	"MarkdownExample",
	-- AERIAL --
	"AerialLine",
	"AerialGuide",
	"AerialBooleanIcon",
	"AerialClassIcon",
	"AerialConstantIcon",
	"AerialConstructorIcon",
	"AerialFieldIcon",
	"AerialFunctionIcon",
	"AerialMethodIcon",
	"AerialNamespaceIcon",
	"AerialNumberIcon",
	"AerialOperatorIcon",
	"AerialTypeParameterIcon",
	"AerialPropertyIcon",
	"AerialStringIcon",
	"AerialVariableIcon",
	"AerialEnumMemberIcon",
	"AerialEnumIcon",
	"AerialFileIcon",
	"AerialModuleIcon",
	"AerialPackageIcon",
	"AerialInterfaceIcon",
	"AerialStructIcon",
	"AerialEventIcon",
	"AerialArrayIcon",
	"AerialObjectIcon",
	"AerialKeyIcon",
	"AerialNullIcon",
	-- CMP --
	"CmpItemAbbr",
	"CmpItemAbbrDeprecated",
	"CmpItemKind",
	"CmpItemMenu",
	"CmpItemAbbrMatch",
	"CmpItemAbbrMatchFuzzy",
	"CmpItemKindSnippet",
	"CmpItemKindKeyword",
	"CmpItemKindText",
	"CmpItemKindMethod",
	"CmpItemKindConstructor",
	"CmpItemKindFunction",
	"CmpItemKindFolder",
	"CmpItemKindModule",
	"CmpItemKindConstant",
	"CmpItemKindField",
	"CmpItemKindProperty",
	"CmpItemKindEnum",
	"CmpItemKindUnit",
	"CmpItemKindClass",
	"CmpItemKindVariable",
	"CmpItemKindFile",
	"CmpItemKindInterface",
	"CmpItemKindColor",
	"CmpItemKindReference",
	"CmpItemKindEnumMember",
	"CmpItemKindStruct",
	"CmpItemKindValue",
	"CmpItemKindEvent",
	"CmpItemKindOperator",
	"CmpItemKindTypeParameter",
	"CmpItemKindCopilot",
	-- DAP --
	"DapBreakpoint",
	"DapBreakpointCondition",
	"DapBreakpointRejected",
	"DapLogPoint",
	"DapStopped",
	"DapUIScope",
	"DapUIType",
	"DapUIValue",
	"DapUIVariable",
	"DapUIModifiedValue",
	"DapUIDecoration",
	"DapUIThread",
	"DapUIStoppedThread",
	"DapUISource",
	"DapUILineNumber",
	"DapUIFloatBorder",
	"DapUIWatchesEmpty",
	"DapUIWatchesValue",
	"DapUIWatchesError",
	"DapUIBreakpointsPath",
	"DapUIBreakpointsInfo",
	"DapUIBreakpointsCurrentLine",
	"DapUIBreakpointsDisabledLine",
	"DapUIStepOver",
	"DapUIStepOverNC",
	"DapUIStepInto",
	"DapUIStepIntoNC",
	"DapUIStepBack",
	"DapUIStepBackNC",
	"DapUIStepOut",
	"DapUIStepOutNC",
	"DapUIStop",
	"DapUIStopNC",
	"DapUIPlayPause",
	"DapUIPlayPauseNC",
	"DapUIRestart",
	"DapUIRestartNC",
	"DapUIUnavailable",
	"DapUIUnavailableNC",
	"DapUIWinSelect",
	-- GITSIGNS --
	"GitSignsAdd",
	"GitSignsChange",
	"GitSignsDelete",
	"GitSignsCurrentLineBlame",
	"GitSignsAddPreview",
	"GitSignsDeletePreview",
	"GitSignsAddInline",
	"GitSignsDeleteInline",
	"GitSignsChangeInline",
	"GitSignsDeleteVirtLn",
	-- HARPOON --
	"HarpoonWindow",
	"HarpoonBorder",
	-- ILLUMINATE --
	"IlluminatedWordRead",
	"IlluminatedWordText",
	"IlluminatedWordWrite",
	-- LSP --
	"LspReferenceText",
	"LspReferenceRead",
	"LspReferenceWrite",
	"DiagnosticVirtualTextError",
	"DiagnosticVirtualTextWarn",
	"DiagnosticVirtualTextInfo",
	"DiagnosticVirtualTextHint",
	"DiagnosticVirtualTextOk",
	"DiagnosticError",
	"DiagnosticWarn",
	"DiagnosticInfo",
	"DiagnosticHint",
	"DiagnosticOk",
	"DiagnosticUnderlineError",
	"DiagnosticUnderlineWarn",
	"DiagnosticUnderlineInfo",
	"DiagnosticUnderlineHint",
	"DiagnosticUnderlineOk",
	"DiagnosticFloatingError",
	"DiagnosticFloatingWarn",
	"DiagnosticFloatingInfo",
	"DiagnosticFloatingHint",
	"DiagnosticFloatingOk",
	"DiagnosticSignError",
	"DiagnosticSignWarn",
	"DiagnosticSignInfo",
	"DiagnosticSignHint",
	"DiagnosticSignOk",
	"LspDiagnosticsDefaultError",
	"LspDiagnosticsDefaultWarning",
	"LspDiagnosticsDefaultInformation",
	"LspDiagnosticsDefaultHint",
	"LspSignatureActiveParameter",
	"LspDiagnosticsError",
	"LspDiagnosticsWarning",
	"LspDiagnosticsInformation",
	"LspDiagnosticsHint",
	"LspDiagnosticsVirtualTextError",
	"LspDiagnosticsVirtualTextWarning",
	"LspDiagnosticsVirtualTextInformation",
	"LspDiagnosticsVirtualTextHint",
	"LspDiagnosticsUnderlineError",
	"LspDiagnosticsUnderlineWarning",
	"LspDiagnosticsUnderlineInformation",
	"LspDiagnosticsUnderlineHint",
	"LspCodeLens",
	"LspCodeLensSeparator",
	"LspInlayHint",
	"LspInfoBorder",
	-- MASON --
	"MasonHeader",
	"MasonHeaderSecondary",
	"MasonHighlight",
	"MasonHighlightBlock",
	"MasonHighlightBlockBold",
	"MasonHighlightSecondary",
	"MasonHighlightBlockSecondary",
	"MasonHighlightBlockBoldSecondary",
	"MasonMuted",
	"MasonMutedBlock",
	"MasonMutedBlockBold",
	"MasonError",
	"MasonHeading",
	-- NEOTREE --
	"NeoTreeDirectoryName",
	"NeoTreeDirectoryIcon",
	"NeoTreeNormal",
	"NeoTreeNormalNC",
	"NeoTreeExpander",
	"NeoTreeIndentMarker",
	"NeoTreeRootName",
	"NeoTreeSymbolicLinkTarget",
	"NeoTreeModified",
	"NeoTreeGitAdded",
	"NeoTreeGitConflict",
	"NeoTreeGitDeleted",
	"NeoTreeGitIgnored",
	"NeoTreeGitModified",
	"NeoTreeGitUnstaged",
	"NeoTreeGitUntracked",
	"NeoTreeGitStaged",
	"NeoTreeFloatBorder",
	"NeoTreeFloatTitle",
	"NeoTreeTitleBar",
	"NeoTreeFileNameOpened",
	"NeoTreeDimText",
	"NeoTreeFilterTerm",
	"NeoTreeTabActive",
	"NeoTreeTabInactive",
	"NeoTreeTabSeparatorActive",
	"NeoTreeTabSeparatorInactive",
	"NeoTreeVertSplit",
	"NeoTreeWinSeparator",
	"NeoTreeStatusLineNC",
	-- NOICE --
	"NoiceCmdline",
	"NoiceCmdlineIcon",
	"NoiceCmdlineIconSearch",
	"NoiceCmdlinePopupBorder",
	"NoiceCmdlinePopupBorderSearch",
	"NoiceConfirmBorder",
	"NoiceMini",
	"NoiceFormatProgressDone",
	"NoiceFormatProgressTodo",
	-- NEOTEST --
	"NeotestPassed",
	"NeotestFailed",
	"NeotestRunning",
	"NeotestSkipped",
	"NeotestTest",
	"NeotestNamespace",
	"NeotestFocused",
	"NeotestFile",
	"NeotestDir",
	"NeotestIndent",
	"NeotestExpandMarker",
	"NeotestAdapterName",
	"NeotestWinSelect",
	"NeotestMarked",
	"NeotestTarget",
	"NeotestUnknown",
	-- RENDER MARKDOWN --
	"RenderMarkdownCode",
	"RenderMarkdownCodeInline",
	"RenderMarkdownBullet",
	"RenderMarkdownTableHead",
	"RenderMarkdownTableRow",
	"RenderMarkdownSuccess",
	"RenderMarkdownInfo",
	"RenderMarkdownHint",
	"RenderMarkdownWarn",
	"RenderMarkdownError",
	-- SEMANTICS --
	"@lsp.type.boolean",
	"@lsp.type.builtinType",
	"@lsp.type.comment",
	"@lsp.type.enum",
	"@lsp.type.enumMember",
	"@lsp.type.escapeSequence",
	"@lsp.type.formatSpecifier",
	"@lsp.type.interface",
	"@lsp.type.keyword",
	"@lsp.type.namespace",
	"@lsp.type.number",
	"@lsp.type.operator",
	"@lsp.type.parameter",
	"@lsp.type.property",
	"@lsp.type.selfKeyword",
	"@lsp.type.typeAlias",
	"@lsp.type.unresolvedReference",
	"@lsp.type.variable",
	"@lsp.typemod.class.defaultLibrary",
	"@lsp.typemod.enum.defaultLibrary",
	"@lsp.typemod.enumMember.defaultLibrary",
	"@lsp.typemod.function.defaultLibrary",
	"@lsp.typemod.keyword.async",
	"@lsp.typemod.macro.defaultLibrary",
	"@lsp.typemod.method.defaultLibrary",
	"@lsp.typemod.operator.injected",
	"@lsp.typemod.string.injected",
	"@lsp.typemod.type.defaultLibrary",
	"@lsp.typemod.variable.defaultLibrary",
	"@lsp.typemod.variable.injected",
	-- SNACKS --
	"SnacksNormal",
	"SnacksWinBar",
	"SnacksBackdrop",
	"SnacksNormalNC",
	"SnacksWinBarNC",
	"SnacksNotifierInfo",
	"SnacksNotifierIconInfo",
	"SnacksNotifierTitleInfo",
	"SnacksNotifierFooterInfo",
	"SnacksNotifierBorderInfo",
	"SnacksNotifierWarn",
	"SnacksNotifierIconWarn",
	"SnacksNotifierTitleWarn",
	"SnacksNotifierBorderWarn",
	"SnacksNotifierFooterWarn",
	"SnacksNotifierDebug",
	"SnacksNotifierIconDebug",
	"SnacksNotifierTitleDebug",
	"SnacksNotifierBorderDebug",
	"SnacksNotifierFooterDebug",
	"SnacksNotifierError",
	"SnacksNotifierIconError",
	"SnacksNotifierTitleError",
	"SnacksNotifierBorderError",
	"SnacksNotifierFooterError",
	"SnacksNotifierTrace",
	"SnacksNotifierIconTrace",
	"SnacksNotifierTitleTrace",
	"SnacksNotifierBorderTrace",
	"SnacksNotifierFooterTrace",
	"SnacksDashboardNormal",
	"SnacksDashboardDesc",
	"SnacksDashboardFile",
	"SnacksDashboardDir",
	"SnacksDashboardFooter",
	"SnacksDashboardHeader",
	"SnacksDashboardIcon",
	"SnacksDashboardKey",
	"SnacksDashboardTerminal",
	"SnacksDashboardSpecial",
	"SnacksDashboardTitle",
	-- TELESCOPE --
	"TelescopeBorder",
	"TelescopeMatching",
	"TelescopeNormal",
	"TelescopePromptBorder",
	"TelescopePromptNormal",
	"TelescopePromptPrefix",
	"TelescopePreviewTitle",
	"TelescopePromptTitle",
	"TelescopeResultsTitle",
	"TelescopeSelection",
	"TelescopeSelectionCaret",
	-- TREESITTER --
	"@variable",
	"@variable.builtin",
	"@variable.parameter",
	"@variable.member",
	"@constant",
	"@constant.builtin",
	"@constant.macro",
	"@module",
	"@label",
	"@string",
	"@string.documentation",
	"@string.regexp",
	"@string.escape",
	"@string.special",
	"@string.special.path",
	"@string.special.symbol",
	"@string.special.url",
	"@character",
	"@character.special",
	"@boolean",
	"@number",
	"@number.float",
	"@type",
	"@type.builtin",
	"@type.definition",
	"@attribute",
	"@property",
	"@function",
	"@function.builtin",
	"@function.call",
	"@function.macro",
	"@function.method",
	"@function.method.call",
	"@constructor",
	"@operator",
	"@keyword",
	"@keyword.modifier",
	"@keyword.type",
	"@keyword.coroutine",
	"@keyword.function",
	"@keyword.operator",
	"@keyword.import",
	"@keyword.repeat",
	"@keyword.return",
	"@keyword.debug",
	"@keyword.exception",
	"@keyword.conditional",
	"@keyword.conditional.ternary",
	"@keyword.directive",
	"@keyword.directive.define",
	"@keyword.export",
	"@punctuation.delimiter",
	"@punctuation.bracket",
	"@punctuation.special",
	"@comment",
	"@comment.documentation",
	"@comment.error",
	"@comment.warning",
	"@comment.hint",
	"@comment.todo",
	"@comment.note",
	"@markup",
	"@markup.strong",
	"@markup.italic",
	"@markup.strikethrough",
	"@markup.underline",
	"@markup.heading",
	"@markup.math",
	"@markup.quote",
	"@markup.environment",
	"@markup.environment.name",
	"@markup.link",
	"@markup.link.label",
	"@markup.link.url",
	"@markup.raw",
	"@markup.list",
	"@markup.list.checked",
	"@markup.list.unchecked",
	"@diff.plus",
	"@diff.minus",
	"@diff.delta",
	"@tag",
	"@tag.attribute",
	"@tag.delimiter",
	"@error",
	"@function.builtin.bash",
	"@markup.heading.1.markdown",
	"@markup.heading.2.markdown",
	"@markup.heading.3.markdown",
	"@markup.heading.4.markdown",
	"@markup.heading.5.markdown",
	"@markup.heading.6.markdown",
	"@constant.java",
	"@property.css",
	"@property.id.css",
	"@property.class.css",
	"@type.css",
	"@type.tag.css",
	"@string.plain.css",
	"@number.css",
	"@property.toml",
	"@label.json",
	"@constructor.lua",
	"@property.typescript",
	"@constructor.typescript",
	"@constructor.tsx",
	"@tag.attribute.tsx",
	"@variable.member.yaml",
	"@string.special.symbol.ruby",
	"@function.method.php",
	"@function.method.call.php",
	"@type.builtin.c",
	"@property.cpp",
	"@type.builtin.cpp",
	"@comment.warning.gitcommit",
	"@string.special.path.gitignore",
	"@parameter",
	"@field",
	"@namespace",
	"@float",
	"@symbol",
	"@string.regex",
	"@text",
	"@text.strong",
	"@text.emphasis",
	"@text.underline",
	"@text.strike",
	"@text.uri",
	"@text.math",
	"@text.environment",
	"@text.environment.name",
	"@text.title",
	"@text.literal",
	"@text.reference",
	"@text.todo.checked",
	"@text.todo.unchecked",
	"@text.todo",
	"@text.warning",
	"@text.note",
	"@text.danger",
	"@method",
	"@method.call",
	"@text.diff.add",
	"@text.diff.delete",
	"@type.qualifier",
	"@keyword.storage",
	"@define",
	"@preproc",
	"@storageclass",
	"@conditional",
	"@exception",
	"@include",
	"@repeat",
	"@symbol.ruby",
	"@variable.member.yaml",
	"@text.title.1.markdown",
	"@text.title.2.markdown",
	"@text.title.3.markdown",
	"@text.title.4.markdown",
	"@text.title.5.markdown",
	"@text.title.6.markdown",
	"@method.php",
	"@method.call.php",
	-- UFO --
	"UfoFoldedFg",
	"UfoFoldedEllipsis",
	-- WHICH KEY --
	"WhichKey",
	"WhichKeyBorder",
	"WhichKeyGroup",
	"WhichKeySeparator",
	"WhichKeyDesc",
	"WhichKeyValue",
}
local used_groups = {}

-- converts interger color value to hex
--- @param color number
local function int_to_hex(color)
	return string.format("#%06x", color)
end

-- transfers a lua table to a string, similar to vim.inspect
--- @param t table
local function inspect(t)
	local list = {}
	for k, v in pairs(t) do
		local tv = type(v)
		if tv == "string" then
			table.insert(list, fmt([[%s = "%s"]], k, v))
		elseif tv == "table" then
			table.insert(list, fmt([[%s = %s]], k, inspect(v)))
		else
			table.insert(list, fmt([[%s = %s]], k, tostring(v)))
		end
	end
	return fmt([[{ %s }]], table.concat(list, ", "))
end

-- translates returned hl groups to lua code as a string, setting the colors
-- concats the result to a larger function which will be returned using string.dump
-- the result is then written to it's respective file
--- @param theme string
--- @param bg string
M.compile = function(theme, bg)
	local compile_path = vim.env.HOME .. "/.local/share/nvim/color-compiler/"
	local lines = {
		string.format(
			[[
return string.dump(function()
vim.o.termguicolors = true
if vim.g.colors_name then vim.cmd("hi clear") end
vim.o.background = "%s"
vim.g.colors_name = "%s"
]],
			bg,
			theme
		),
	}

	for _, group in ipairs(group_names) do
		if not hl_groups[group] or used_groups[group] then
			goto continue
		end

		local hl = hl_groups[group]
		if hl.fg then
			if type(hl.fg) ~= "number" then
				print(hl.fg)
				print(group)
			end
			hl.fg = int_to_hex(hl.fg)
		else
			hl.fg = "NONE"
		end
		if hl.bg then
			hl.bg = int_to_hex(hl.bg)
		else
			hl.bg = "NONE"
		end
		if hl.link then
			hl = { link = hl.link }
		end

		table.insert(used_groups, group)
		table.insert(lines, fmt([[vim.api.nvim_set_hl(0, "%s", %s)]], group, inspect(hl)))
		::continue::
	end
	table.insert(lines, "end, true)")

	if vim.fn.isdirectory(compile_path) == 0 then
		vim.fn.mkdir(compile_path, "p")
	end

	local f = loadstring(table.concat(lines, "\n"))
	if not f then
		local err_path = (os.getenv("TMP") or "/tmp") .. "/color-compiler_error.lua"

		print(fmt(
			[[
color-compiler (error): An Error occured during the compilation of the following theme: %s
For further debugging check %s
		  ]],
			theme,
			err_path
		))

		local err = io.open(err_path, "wb")
		if err then
			err:write(table.concat(lines, "\n"))
			err:close()
		end
		dofile(err_path)
		return
	end

	local debug_path = (os.getenv("TMP") or "/tmp") .. "/color-compiler_logs.lua"
	local debug = io.open(debug_path, "wb")
	if debug then
		debug:write(table.concat(lines, "\n"))
		debug:close()
	end

	local file = assert(
		io.open(compile_path .. theme, "wb"),
		"Permission denied while writing compiled file to " .. compile_path .. theme
	)
	file:write(f())
	file:close()
end

return M
